openapi: 3.0.0
info:
  title: Payment Orders API
  version: 1.0.0
description: >-
  API for ingesting order/chargeback webhooks, storing data, and exposing
  simple read endpoints for orders, disputes, and their events.

servers:
  - url: http://localhost:3000
    description: Local development server


paths:
  /webhooks/payments/chargebacks:
    post:
      summary: Handle chargeback webhooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargebackWebhook'
      responses:
        '202': { description: Accepted for async processing }
        '200': { description: Duplicate webhook received (idempotent) }
        '400': { description: Invalid payload }


  /webhooks/payments/orders:
    post:
      summary: Handle order webhooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderEventIn'
      responses:
        '202': { description: Accepted for async processing }
        '200': { description: Duplicate webhook received (idempotent) }
        '400': { description: Invalid payload }

  /orders:
    get:
      summary: Retrieve a list of orders
      parameters:
        - name: status
          in: query
          schema: { type: string }
          description: Comma-separated statuses. Returns all if not provided.
        - name: user_id
          in: query
          schema: { type: string }
          description: Filter by user ID. Returns all if not provided.
        - name: limit
          in: query
          schema: { type: integer, default: 10, minimum: 1, maximum: 200 }
        - name: offset
          in: query
          schema: { type: integer, default: 0, minimum: 0 }
        - name: sort_by
          in: query
          schema: { type: string, enum: [ created_at, updated_at ], default: created_at }
        - name: sort_order
          in: query
          schema: { type: string, enum: [ asc, desc ], default: desc }
      responses:
        '200':
          description: Orders page
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedOrders' }

  /orders/{order_id}:
    get:
      summary: Retrieve details of a specific order
      parameters:
        - name: order_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Order' }
        '404': { description: Order not found }

  /orders/{order_id}/events:
    get:
      summary: Retrieve events for a specific order.
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description: List of events for the order
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Event' }
        '404': { description: Order not found }

  /disputes:
    get:
      summary: Retrieve a list of disputes
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [ open, under_review, submitted, won, lost, canceled ]
        - name: order_id
          in: query
          schema: { type: string }
        - name: limit
          in: query
          schema: { type: integer, default: 10, minimum: 1, maximum: 200 }
        - name: offset
          in: query
          schema: { type: integer, default: 0, minimum: 0 }
      responses:
        '200':
          description: Disputes page
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedDisputes' }

  /disputes/{dispute_id}:
    get:
      summary: Retrieve dispute details
      parameters:
        - name: dispute_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Dispute details
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Dispute' }
        '404': { description: Dispute not found }


  /disputes/events:
    get:
      summary: Retrieve events for a specific dispute
      parameters:
        - name: dispute_ids
          in: query
          schema:
            type: array
            items:
              type: string
        - name: kinds
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
          description: Comma-separated list of event kinds
        - name: limit
          in: query
          required: false
          schema: 
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
        - name: cursor
          in: query
          required: false
          schema: { type: string }
        - name: time_from
          in: query
          required: false
          schema: 
            type: string
            format: date-time
        - name: time_to
          in: query
          required: false
          schema: 
            type: string
            format: date-time
        - name: sort_asc
          in: query
          required: false
          schema: { type: boolean }
      responses:
        '200':
          description: Paginated dispute events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputeEventPage'
        '404': { description: Dispute not found }

  /disputes/{dispute_id}/evidence:
    get:
      summary: Retrieve evidence for a specific dispute
      parameters:
        - name: dispute_id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Dispute evidence
          content:
            application/json:
              schema: { $ref: '#/components/schemas/EvidenceBundle' }
        '404': { description: Evidence not found }
    post:
      summary: Add/update evidence for a dispute (simple)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/EvidenceUpsert' }
      responses:
        '200':
          description: Current evidence bundle
          content:
            application/json:
              schema: { $ref: '#/components/schemas/EvidenceBundle' }
        '404': { description: Dispute not found }

  /disputes/{dispute_id}/submit:
    post:
      summary: Submit evidence (representment)
      responses:
        '202':
          description: Submission accepted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SubmissionAccepted' }
        '404': { description: Dispute not found }


components:
  schemas:
    OrderEventIn:
      type: object
      required: [event_id, order_id, user_id, status, created_at, updated_at]
      properties:
        event_id:   { type: string }
        order_id:   { type: string }
        user_id:    { type: string }
        status:     { type: string, enum: [created, updated, failed, success] }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        meta:       { type: object, additionalProperties: true }

    ChargebackWebhook:
      type: object
      required: [provider_event_id, status, occurred_at]
      properties:
        provider_event_id: { type: string }
        order_id:          { type: string }
        status:            { type: string, enum: [opened, updated, closed] }
        reason:            { type: string }
        amount:            { type: number }
        currency:          { type: string }
        occurred_at:       { type: string, format: date-time }
        evidence_due_at:   { type: string, format: date-time }
        meta:              { type: object, additionalProperties: true }

    Order:
      type: object
      properties:
        order_id:   { type: string }
        user_id:    { type: string }
        status:     { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

    Event:
      type: object
      properties:
        event_id:   { type: string }
        order_id:   { type: string }
        user_id:    { type: string }
        status:     { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        meta:       { type: object, additionalProperties: true }

    PagedOrders:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/Order' }
        meta:
          type: object
          properties:
            limit:  { type: integer }
            offset: { type: integer }
            total:  { type: integer }

    Dispute:
      type: object
      properties:
        dispute_id:     { type: string }
        order_id:       { type: string }
        status:
          type: string
          enum: [open, under_review, submitted, won, lost, canceled]
        reason:         { type: string }
        amount:         { type: number }
        currency:       { type: string }
        opened_at:      { type: string, format: date-time }
        evidence_due_at: { type: string, format: date-time }
        submitted_at:   { type: string, format: date-time }
        closed_at:      { type: string, format: date-time }

    PagedDisputes:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/Dispute' }
        meta:
          type: object
          properties:
            limit:  { type: integer }
            offset: { type: integer }
            total:  { type: integer }

    DisputeEvent:
      type: object
      properties:
        event_id:   { type: string }
        dispute_id: { type: string }
        kind:
          type: string
          enum: [webhook_opened, webhook_updated, evidence_added, evidence_submitted, provider_decision]
        provider_event_id: { type: string }
        data: { type: object, additionalProperties: true }
        created_at: { type: string, format: date-time }

    DisputeEventPage:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/DisputeEvent' }
        next_cursor: { type: string }
        has_more: { type: boolean }

    EvidenceUpsert:
      type: object
      properties:
        fields:
          type: object
          additionalProperties: { type: string }
        files:
          type: array
          items:
            type: object
            properties:
              file_id:      { type: string }
              name:         { type: string }
              content_type: { type: string }
              size:         { type: integer }

    EvidenceBundle:
      type: object
      properties:
        dispute_id: { type: string }
        fields:
          type: object
          additionalProperties: { type: string }
        files:
          type: array
          items:
            $ref: '#/components/schemas/EvidenceUpsert/properties/files/items'
        updated_at: { type: string, format: date-time }

    SubmissionAccepted:
      type: object
      properties:
        submission_id: { type: string }
        status:        { type: string, enum: [submitted, submission_error] }
        submitted_at:  { type: string, format: date-time }
        error:         { type: string }