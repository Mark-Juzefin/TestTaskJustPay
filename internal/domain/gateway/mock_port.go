// Code generated by MockGen. DO NOT EDIT.
// Source: port.go
//
// Generated by this command:
//
//	mockgen -source port.go -destination mock_port.go -package gateway
//

// Package gateway is a generated GoMock package.
package gateway

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// SubmitRepresentment mocks base method.
func (m *MockProvider) SubmitRepresentment(ctx context.Context, req RepresentmentRequest) (RepresentmentResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitRepresentment", ctx, req)
	ret0, _ := ret[0].(RepresentmentResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitRepresentment indicates an expected call of SubmitRepresentment.
func (mr *MockProviderMockRecorder) SubmitRepresentment(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitRepresentment", reflect.TypeOf((*MockProvider)(nil).SubmitRepresentment), ctx, req)
}
