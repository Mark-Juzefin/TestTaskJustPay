// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go
//
// Generated by this command:
//
//	mockgen -source repo.go -destination mock_repo.go -package dispute
//

// Package dispute is a generated GoMock package.
package dispute

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDisputeRepo is a mock of DisputeRepo interface.
type MockDisputeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDisputeRepoMockRecorder
	isgomock struct{}
}

// MockDisputeRepoMockRecorder is the mock recorder for MockDisputeRepo.
type MockDisputeRepoMockRecorder struct {
	mock *MockDisputeRepo
}

// NewMockDisputeRepo creates a new mock instance.
func NewMockDisputeRepo(ctrl *gomock.Controller) *MockDisputeRepo {
	mock := &MockDisputeRepo{ctrl: ctrl}
	mock.recorder = &MockDisputeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisputeRepo) EXPECT() *MockDisputeRepoMockRecorder {
	return m.recorder
}

// CreateDispute mocks base method.
func (m *MockDisputeRepo) CreateDispute(ctx context.Context, dispute Dispute) (*Dispute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDispute", ctx, dispute)
	ret0, _ := ret[0].(*Dispute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDispute indicates an expected call of CreateDispute.
func (mr *MockDisputeRepoMockRecorder) CreateDispute(ctx, dispute any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDispute", reflect.TypeOf((*MockDisputeRepo)(nil).CreateDispute), ctx, dispute)
}

// CreateDisputeEvent mocks base method.
func (m *MockDisputeRepo) CreateDisputeEvent(ctx context.Context, event NewDisputeEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDisputeEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDisputeEvent indicates an expected call of CreateDisputeEvent.
func (mr *MockDisputeRepoMockRecorder) CreateDisputeEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDisputeEvent", reflect.TypeOf((*MockDisputeRepo)(nil).CreateDisputeEvent), ctx, event)
}

// GetDisputeByID mocks base method.
func (m *MockDisputeRepo) GetDisputeByID(ctx context.Context, disputeID string) (*Dispute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputeByID", ctx, disputeID)
	ret0, _ := ret[0].(*Dispute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputeByID indicates an expected call of GetDisputeByID.
func (mr *MockDisputeRepoMockRecorder) GetDisputeByID(ctx, disputeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputeByID", reflect.TypeOf((*MockDisputeRepo)(nil).GetDisputeByID), ctx, disputeID)
}

// GetDisputeByOrderID mocks base method.
func (m *MockDisputeRepo) GetDisputeByOrderID(ctx context.Context, orderID string) (*Dispute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputeByOrderID", ctx, orderID)
	ret0, _ := ret[0].(*Dispute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputeByOrderID indicates an expected call of GetDisputeByOrderID.
func (mr *MockDisputeRepoMockRecorder) GetDisputeByOrderID(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputeByOrderID", reflect.TypeOf((*MockDisputeRepo)(nil).GetDisputeByOrderID), ctx, orderID)
}

// GetDisputeEvents mocks base method.
func (m *MockDisputeRepo) GetDisputeEvents(ctx context.Context, query *DisputeEventQuery) ([]DisputeEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputeEvents", ctx, query)
	ret0, _ := ret[0].([]DisputeEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputeEvents indicates an expected call of GetDisputeEvents.
func (mr *MockDisputeRepoMockRecorder) GetDisputeEvents(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputeEvents", reflect.TypeOf((*MockDisputeRepo)(nil).GetDisputeEvents), ctx, query)
}

// GetDisputes mocks base method.
func (m *MockDisputeRepo) GetDisputes(ctx context.Context) ([]Dispute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputes", ctx)
	ret0, _ := ret[0].([]Dispute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputes indicates an expected call of GetDisputes.
func (mr *MockDisputeRepoMockRecorder) GetDisputes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputes", reflect.TypeOf((*MockDisputeRepo)(nil).GetDisputes), ctx)
}

// GetEvidence mocks base method.
func (m *MockDisputeRepo) GetEvidence(ctx context.Context, disputeID string) (*Evidence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidence", ctx, disputeID)
	ret0, _ := ret[0].(*Evidence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidence indicates an expected call of GetEvidence.
func (mr *MockDisputeRepoMockRecorder) GetEvidence(ctx, disputeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidence", reflect.TypeOf((*MockDisputeRepo)(nil).GetEvidence), ctx, disputeID)
}

// InTransaction mocks base method.
func (m *MockDisputeRepo) InTransaction(ctx context.Context, fn func(TxDisputeRepo) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// InTransaction indicates an expected call of InTransaction.
func (mr *MockDisputeRepoMockRecorder) InTransaction(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InTransaction", reflect.TypeOf((*MockDisputeRepo)(nil).InTransaction), ctx, fn)
}

// UpdateDispute mocks base method.
func (m *MockDisputeRepo) UpdateDispute(ctx context.Context, dispute Dispute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDispute", ctx, dispute)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDispute indicates an expected call of UpdateDispute.
func (mr *MockDisputeRepoMockRecorder) UpdateDispute(ctx, dispute any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDispute", reflect.TypeOf((*MockDisputeRepo)(nil).UpdateDispute), ctx, dispute)
}

// UpsertEvidence mocks base method.
func (m *MockDisputeRepo) UpsertEvidence(ctx context.Context, disputeID string, upsert EvidenceUpsert) (*Evidence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertEvidence", ctx, disputeID, upsert)
	ret0, _ := ret[0].(*Evidence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertEvidence indicates an expected call of UpsertEvidence.
func (mr *MockDisputeRepoMockRecorder) UpsertEvidence(ctx, disputeID, upsert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEvidence", reflect.TypeOf((*MockDisputeRepo)(nil).UpsertEvidence), ctx, disputeID, upsert)
}

// MockTxDisputeRepo is a mock of TxDisputeRepo interface.
type MockTxDisputeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTxDisputeRepoMockRecorder
	isgomock struct{}
}

// MockTxDisputeRepoMockRecorder is the mock recorder for MockTxDisputeRepo.
type MockTxDisputeRepoMockRecorder struct {
	mock *MockTxDisputeRepo
}

// NewMockTxDisputeRepo creates a new mock instance.
func NewMockTxDisputeRepo(ctrl *gomock.Controller) *MockTxDisputeRepo {
	mock := &MockTxDisputeRepo{ctrl: ctrl}
	mock.recorder = &MockTxDisputeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxDisputeRepo) EXPECT() *MockTxDisputeRepoMockRecorder {
	return m.recorder
}

// CreateDispute mocks base method.
func (m *MockTxDisputeRepo) CreateDispute(ctx context.Context, dispute Dispute) (*Dispute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDispute", ctx, dispute)
	ret0, _ := ret[0].(*Dispute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDispute indicates an expected call of CreateDispute.
func (mr *MockTxDisputeRepoMockRecorder) CreateDispute(ctx, dispute any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDispute", reflect.TypeOf((*MockTxDisputeRepo)(nil).CreateDispute), ctx, dispute)
}

// CreateDisputeEvent mocks base method.
func (m *MockTxDisputeRepo) CreateDisputeEvent(ctx context.Context, event NewDisputeEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDisputeEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDisputeEvent indicates an expected call of CreateDisputeEvent.
func (mr *MockTxDisputeRepoMockRecorder) CreateDisputeEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDisputeEvent", reflect.TypeOf((*MockTxDisputeRepo)(nil).CreateDisputeEvent), ctx, event)
}

// GetDisputeByID mocks base method.
func (m *MockTxDisputeRepo) GetDisputeByID(ctx context.Context, disputeID string) (*Dispute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputeByID", ctx, disputeID)
	ret0, _ := ret[0].(*Dispute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputeByID indicates an expected call of GetDisputeByID.
func (mr *MockTxDisputeRepoMockRecorder) GetDisputeByID(ctx, disputeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputeByID", reflect.TypeOf((*MockTxDisputeRepo)(nil).GetDisputeByID), ctx, disputeID)
}

// GetDisputeByOrderID mocks base method.
func (m *MockTxDisputeRepo) GetDisputeByOrderID(ctx context.Context, orderID string) (*Dispute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputeByOrderID", ctx, orderID)
	ret0, _ := ret[0].(*Dispute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputeByOrderID indicates an expected call of GetDisputeByOrderID.
func (mr *MockTxDisputeRepoMockRecorder) GetDisputeByOrderID(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputeByOrderID", reflect.TypeOf((*MockTxDisputeRepo)(nil).GetDisputeByOrderID), ctx, orderID)
}

// GetDisputeEvents mocks base method.
func (m *MockTxDisputeRepo) GetDisputeEvents(ctx context.Context, query *DisputeEventQuery) ([]DisputeEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputeEvents", ctx, query)
	ret0, _ := ret[0].([]DisputeEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputeEvents indicates an expected call of GetDisputeEvents.
func (mr *MockTxDisputeRepoMockRecorder) GetDisputeEvents(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputeEvents", reflect.TypeOf((*MockTxDisputeRepo)(nil).GetDisputeEvents), ctx, query)
}

// GetDisputes mocks base method.
func (m *MockTxDisputeRepo) GetDisputes(ctx context.Context) ([]Dispute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputes", ctx)
	ret0, _ := ret[0].([]Dispute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputes indicates an expected call of GetDisputes.
func (mr *MockTxDisputeRepoMockRecorder) GetDisputes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputes", reflect.TypeOf((*MockTxDisputeRepo)(nil).GetDisputes), ctx)
}

// GetEvidence mocks base method.
func (m *MockTxDisputeRepo) GetEvidence(ctx context.Context, disputeID string) (*Evidence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvidence", ctx, disputeID)
	ret0, _ := ret[0].(*Evidence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvidence indicates an expected call of GetEvidence.
func (mr *MockTxDisputeRepoMockRecorder) GetEvidence(ctx, disputeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvidence", reflect.TypeOf((*MockTxDisputeRepo)(nil).GetEvidence), ctx, disputeID)
}

// UpdateDispute mocks base method.
func (m *MockTxDisputeRepo) UpdateDispute(ctx context.Context, dispute Dispute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDispute", ctx, dispute)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDispute indicates an expected call of UpdateDispute.
func (mr *MockTxDisputeRepoMockRecorder) UpdateDispute(ctx, dispute any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDispute", reflect.TypeOf((*MockTxDisputeRepo)(nil).UpdateDispute), ctx, dispute)
}

// UpsertEvidence mocks base method.
func (m *MockTxDisputeRepo) UpsertEvidence(ctx context.Context, disputeID string, upsert EvidenceUpsert) (*Evidence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertEvidence", ctx, disputeID, upsert)
	ret0, _ := ret[0].(*Evidence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertEvidence indicates an expected call of UpsertEvidence.
func (mr *MockTxDisputeRepoMockRecorder) UpsertEvidence(ctx, disputeID, upsert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEvidence", reflect.TypeOf((*MockTxDisputeRepo)(nil).UpsertEvidence), ctx, disputeID, upsert)
}
